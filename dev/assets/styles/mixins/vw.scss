$base-width: 1920;
$breakpoint-desktop: 1200;

$adaptive-properties: ();
$last-selector: null;

@function vw($adaptive-size, $size: $base-width) {
  @return calc($adaptive-size / $size * 100vw);
}

@function get-full-property($short-name) {
  $properties: (
    'fz': 'font-size',
    'lh': 'line-height',
    'ls': 'letter-spacing',
    
    'pl': 'padding-left',
    'pr': 'padding-right',
    'pt': 'padding-top',
    'pb': 'padding-bottom',
    'p': 'padding',
    'm': 'margin',
    'ml': 'margin-left',
    'mr': 'margin-right',
    'mt': 'margin-top',
    'mb': 'margin-bottom',
    
    't': 'top',
    'l': 'left',
    'r': 'right',
    'b': 'bottom',
    'translateX': 'transform: translateX',
    'translateY': 'transform: translateY',
    'scale': 'transform: scale',
    
    'w': 'width',
    'h': 'height',
    'min-w': 'min-width',
    'min-h': 'min-height',
    'max-w': 'max-width',
    'max-h': 'max-height',
    
    'gap': 'gap',
    'row-gap': 'row-gap',
    'column-gap': 'column-gap',
    
    'border': 'border',
    'br': 'border-radius',
    'btlr': 'border-top-left-radius',
    'btrr': 'border-top-right-radius',
    'bblr': 'border-bottom-left-radius',
    'bbrr': 'border-bottom-right-radius',
    
    'basis': 'flex-basis',

    'grid-gap': 'grid-gap',
    'grid-row-gap': 'grid-row-gap',
    'grid-column-gap': 'grid-column-gap'
  );
  
  @return map-get($properties, $short-name);
}

@mixin dim($property, $adaptive-size, $fixed-size: 16) {
  $full-property: get-full-property($property);
  $prop: if($full-property, $full-property, $property);
  $selector: &;
  
  #{$prop}: #{$fixed-size}px;
  
  @if $last-selector != null and $last-selector != $selector {
    @at-root #{$last-selector} {
      @media (min-width: #{$breakpoint-desktop}px) {
        @each $p, $value in map-get($adaptive-properties, $last-selector) {
          #{$p}: $value;
        }
      }
    }
    $adaptive-properties: map-merge($adaptive-properties, ($last-selector: ())) !global;
  }
  
  $current-props: ();
  @if map-has-key($adaptive-properties, $selector) {
    $current-props: map-get($adaptive-properties, $selector);
  }
  $current-props: map-merge($current-props, ($prop: vw($adaptive-size)));
  $adaptive-properties: map-merge($adaptive-properties, ($selector: $current-props)) !global;
  
  $last-selector: $selector !global;
  
  @at-root {
    @if & {
      @if not & == null {
        @content;
        @media (min-width: #{$breakpoint-desktop}px) {
          @each $p, $value in map-get($adaptive-properties, $selector) {
            #{$p}: $value;
          }
        }
        $adaptive-properties: map-merge($adaptive-properties, ($selector: ())) !global;
      }
    }
  }
}

@mixin merge {
  @media (min-width: #{$breakpoint-desktop}px) {
    @each $prop, $value in map-get($adaptive-properties, &) {
      #{$prop}: $value;
    }
  }
  $adaptive-properties: map-merge($adaptive-properties, (&: ())) !global;
}